<project name="Showcase" basedir="." default="build">
	<property name="appname" value="${ant.project.name}" />

	<property environment="os" />

	<property name="sc.build.dir" value="build" />
	<property name="sc.extragwt.dir" value="extragwt" />
	<property name="sc.datagrid.dir" value="datagrid" />
	<property name="sc.src.dir" value="src" />
	<property name="sc.tmp.dir" value="tmp" />
	<property name="sc.runtime.dir" value="runtime" />
	<property name="sc.webapp.dir" value="WebContent" />
	<property name="sc.images.dir" value="${sc.webapp.dir}/resources" />
	<property name="sc.webinf.dir" value="${sc.webapp.dir}/WEB-INF" />
	<property name="sc.js.dir" value="${sc.webapp.dir}/js" />
	<property name="sc.class.dir" value="${sc.webinf.dir}/classes" />
	<property name="sc.lib.dir" value="${sc.webinf.dir}/lib" />
	<property name="sc.gwt.compiled.dir" value="${sc.webapp.dir}/app" />
	<property name="sc.userdata.dir" value="userdatas" />
	<property name="sc.gwt.src.root.dir" value="${sc.src.dir}\ru\curs\showcase\app" />
	<property name="sc.general.props.file" value="general.properties" />
	<property name="sc.war.file" value="${sc.build.dir}/${appname}" />

	<property name="sc.env.props" value="${env}.properties" />
	<property file="${sc.env.props}" />

	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" />
	
	<taskdef resource="checkstyletask.properties"/>

	<svnSetting javahl="false" svnkit="false" id="svn.settings" certreject="false" />

	<property name="sc.db.backup.prefix" value="showcase-test" />

	<target name="info.svn" description="Read svn revision">
		<if>
			<isset property="os.SVN_REVISION"/>
			 <then>
			   <property name="sc.last.rev" value="${os.SVN_REVISION}"/>
			 </then>
			 <else>
				<svn refid="svn.settings">
					<singleinfo target="." property="sc.last.rev" request="lastRevision" />
				</svn>
			 </else>			
		</if>
		<echo>Последняя версия кода в хранилище ${sc.last.rev}</echo>
	</target>	
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
	<target name="write.app.version" depends="info.svn" description="Write current app version to file">
		<loadfile property="sc.version" srcFile="${sc.src.dir}/version" />
		<echo>Версия Showcase ${sc.version}.${sc.last.rev}</echo>
		<var name="sc.war.file" unset="true" />
		<property name="sc.war.file" value="${sc.build.dir}/${appname}-${sc.version}.${sc.last.rev}" />
		<echo>Update build number</echo>
		<echo file="${sc.build.dir}\war\WEB-INF\classes\build" message="${sc.last.rev}" />	
	</target>

	<path id="master-classpath" description="Master CLASSPATH for this script">
		<fileset dir="${sc.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${sc.servlet.cont.dir}/lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${sc.gwt.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${sc.junit.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${sc.webinf.dir}/classes/" />
	</path>

	<path id="test-classpath" description="CLASSPATH for unittests">
		<fileset dir="${sc.runtime.dir}/lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${sc.servlet.cont.dir}/bin">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${sc.datagrid.dir}" />
		<pathelement path="${sc.extragwt.dir}" />
	</path>
	
	<path id="gwt-classpath" description="CLASSPATH for GWT">
		<!--  порядок важен! -->
		<pathelement path="${sc.src.dir}" />
		<pathelement path="${sc.datagrid.dir}" />
		<pathelement path="${sc.extragwt.dir}" />
		<pathelement path="${sc.lib.dir}/${sc.gquery-dnd-bundle}" />
		<pathelement path="${sc.gwt.dir}/gwt-dev.jar" />
		<pathelement path="${sc.gwt.dir}/gwt-user.jar" />
	</path>	

	<target name="checkProperties" description="Check required environment varianbles: JAVA_HOME">
		<fail unless="os.JAVA_HOME">JAVA_HOME must be set</fail>
	</target>

	<target name="info" description="Show wise configuration info">
		<echo>Соединение с SQL Server "${sc.rdbms.name}" и развертывание на контейнере сервлетов "${sc.servlet.cont.dir}"</echo>
	</target>

	<target name="init.local.files" description="Create local settings files from templates"> 
		<copy verbose="true" file="local.template.properties" tofile="local.properties" />
		<copy verbose="true" file="template.classpath" tofile=".classpath" />
		<copy verbose="true" file="${sc.src.dir}/general.template.properties" tofile="${sc.src.dir}/${sc.general.props.file}" />
		<copy verbose="true" file="${sc.userdata.dir}/default/app.template.properties" tofile="${sc.userdata.dir}/default/app.properties" />
		<copy verbose="true" file="${sc.userdata.dir}/test1/app.template.properties" tofile="${sc.userdata.dir}/test1/app.properties" />
		<copy verbose="true" file="${sc.userdata.dir}/test2/app.template.properties" tofile="${sc.userdata.dir}/test2/app.properties" />
		<copy verbose="true" file="${sc.userdata.dir}/pg/app.template.properties" tofile="${sc.userdata.dir}/pg/app.properties" />
		<copy verbose="true" file="${sc.userdata.dir}/ora/app.template.properties" tofile="${sc.userdata.dir}/ora/app.properties" />		
		<copy verbose="true" file="${sc.userdata.dir}/default/gridproperties/default.template.properties" tofile="${sc.userdata.dir}/default/gridproperties/default.properties" />
		<copy verbose="true" file="${sc.userdata.dir}/test1/gridproperties/default.template.properties" tofile="${sc.userdata.dir}/test1/gridproperties/default.properties" />
		<copy verbose="true" file="${sc.userdata.dir}/test2/gridproperties/default.template.properties" tofile="${sc.userdata.dir}/test2/gridproperties/default.properties" />
		<copy verbose="true" file="${sc.userdata.dir}/pg/gridproperties/default.template.properties" tofile="${sc.userdata.dir}/pg/gridproperties/default.properties" />
		<copy verbose="true" file="${sc.userdata.dir}/ora/gridproperties/default.template.properties" tofile="${sc.userdata.dir}/ora/gridproperties/default.properties" />			
		<copy verbose="true" file="${sc.src.dir}/logback.template.xml" tofile="${sc.src.dir}/logback.xml" />
		<copy verbose="true" file="${sc.gwt.src.root.dir}/template.App.gwt.xml" tofile="${sc.gwt.src.root.dir}/App.gwt.xml" />
		<echo>Не забудьте указать правильные настройки в файлах local.properties, ${sc.general.props.file} и app.properties, а также настроить classpath (Build path) с помощью Eclipse</echo>
	</target>

	<target name="init.dirs" depends="info" description="Create some base dirs">
		<mkdir dir="${sc.class.dir}" />
		<mkdir dir="${sc.tmp.dir}" />
		<mkdir dir="${sc.build.dir}/junit" />
		<mkdir dir="${sc.build.dir}/war" />
		<mkdir dir="${sc.build.dir}/checkstyle" />
	</target>

	<!--<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
		<classpath>
			<pathelement location="${ANT.HOME}/aspectjtools.jar" />
		</classpath>
	</taskdef>-->

	<target name="compile" depends="init.dirs" description="Compiles .java files to WAR directory">
		<!--Вариант с org.aspectj.tools.ant.taskdefs.Ajc11Compiler не работал при запуске из Eclipse-->
		<!--Сейчас компилируем обычным javac-->
		<javac source="1.7" target="1.7" includeantruntime="false" encoding="UTF-8" srcdir="${sc.src.dir}; datagrid; extragwt" destdir="${sc.class.dir}" debug="true" failonerror="true" classpathref="master-classpath" excludes="*/*Test.java">
		</javac>
		<!--<iajc source="1.6" target="1.6" encoding="UTF-8" destdir="${class.dir}" debug="true" failonerror="true" classpathref="master-classpath" excludes="*/*Test.java">
			<sourceroots>
				<pathelement location="${src.dir}" />
				<pathelement location="datagrid" />
				<pathelement location="extragwt" />
			</sourceroots>
		</iajc>-->
	</target>

	<target name="build" depends="compile">
		<copy todir="${sc.class.dir}">
			<fileset dir="${sc.src.dir}">
				<include name="**/*" />
				<exclude name="**/*.java" />
				<exclude name="**/*.template" />
			</fileset>
		</copy>
	</target>

	<target name="build.gwt" depends="init.dirs" description="Build GWT code for all browsers">
		<echo>Prepare for GWT build for all browsers</echo>
		<copy file="${sc.gwt.src.root.dir}\App.gwt.xml" tofile="${sc.tmp.dir}\App.gwt.xml.re" overwrite="true" />
		<copy file="${sc.gwt.src.root.dir}\template.App.gwt.xml" tofile="${sc.gwt.src.root.dir}\App.gwt.xml" overwrite="true" />		
		<echo>Compiling GWT Javascript</echo>
		<java classname="com.google.gwt.dev.Compiler" fork="true">
			<classpath refid="gwt-classpath" />
			<classpath refid="master-classpath" />
			<arg line="-war ${sc.webapp.dir}" />
			<arg line="-optimize 9" />
			<arg line="ru.curs.showcase.app.App" />
			<jvmarg line="-Dgwt.persistentunitcachedir=tmp" />
		</java>
		<copy tofile="${sc.gwt.src.root.dir}\App.gwt.xml" file="${sc.tmp.dir}\App.gwt.xml.re" overwrite="true" />		
	</target>
	
	<target name="test.gwt" depends="build" description="Check GWT build">	
		<java classname="com.google.gwt.dev.Compiler" fork="true">
			<classpath refid="gwt-classpath" />
			<classpath refid="master-classpath" />
			<arg line="-validateOnly" />
			<arg line="ru.curs.showcase.app.App" />
			<jvmarg line="-Dgwt.persistentunitcachedir=tmp" />			
		</java>	
		<echo>Test GWT successfully completed!</echo>
	</target>	

	<target name="clean" description="Deletes files from war, tmp and dist directories">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${sc.gwt.compiled.dir}">
			</fileset>
		</delete>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${sc.webinf.dir}/deploy">
			</fileset>
		</delete>		
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${sc.build.dir}">
			</fileset>
		</delete>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${sc.tmp.dir}">
			</fileset>
		</delete>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${sc.class.dir}">
			</fileset>
		</delete>
	</target>

	<target name="rebuild" depends="clean, build" description="clean + build" />

	<target name="ci.build" depends="checkProperties, clean, init.dirs, init.local.files, init.dojo, init.jython, copy.patches, info.env, build, checkstyle, build.gwt, test, dist" 
		description="Target for CI build"/>
	
	<target name="dist" depends="write.app.version, write.gwt.version" description="Assembles WAR file">
		<echo>Copy compiled data</echo>
		<copy todir="${sc.build.dir}/war" overwrite="no">
			<fileset dir="${sc.webapp.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		
		<echo>Copy sources to war</echo>
		<copy todir="${sc.build.dir}/war/WEB-INF/src/core">
			<fileset dir="${sc.src.dir}">
				<include name="**/*.java" />
			</fileset>
		</copy>		
		<copy todir="${sc.build.dir}/war/WEB-INF/src/${sc.extragwt.dir}">
			<fileset dir="${sc.extragwt.dir}">
				<include name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${sc.build.dir}/war/WEB-INF/src/${sc.datagrid.dir}">
			<fileset dir="${sc.datagrid.dir}">
				<include name="**/*.java" />
			</fileset>
		</copy>

		<echo>Making war not love</echo>
		<war destfile="${sc.war.file}.war">
			<fileset dir="${sc.build.dir}/war">
				<include name="**/*" />
				<exclude name="**/*mock*.jar" />
				<exclude name="**/*.template" />
				<exclude name="debug.jsp" />
			</fileset>
		</war>

		<echo>Copy runtime libs</echo>
		<copy todir="${sc.build.dir}/war/WEB-INF/lib">
			<fileset dir="${sc.runtime.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<echo>Making mega war</echo>
		<war destfile="${sc.war.file}-ext.war">
			<fileset dir="${sc.build.dir}/war">
				<include name="**/*" />
				<exclude name="**/*mock*.jar" />
				<exclude name="**/*.template" />
				<exclude name="debug.jsp" />
			</fileset>
		</war>

		<echo>Clearing after make war</echo>
		<delete dir="${sc.build.dir}/war" failonerror="false" />
	</target>

	<target name="deploy.runtime.tomcat" description="Copy runtime libs to Tomcat">
		<copy todir="${sc.deploy.dir}/${ant.project.name}/WEB-INF/lib" failonerror="false">
			<fileset dir="${sc.runtime.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="deploy.tomcat" depends="rebuild, build.gwt, dist" description="Deploys WAR file with test data to ${sc.deploy.dir}">
		<delete failonerror="true" dir="${sc.deploy.dir}/${appname}" />
		<copy file="${sc.war.file}.war" todir="${sc.deploy.dir}" />
	</target>

	<target name="test" depends="build" description="Unit and component tests run">
		<mkdir dir="tmp/junit" />
		<junit printsummary="true" showoutput="false" filtertrace="true" haltonerror="true" haltonfailure="true">
			<classpath>
				<path refid="test-classpath" />
				<path refid="master-classpath" />
			</classpath>
			<formatter type="xml" usefile="true" />
			<batchtest todir="${sc.build.dir}/junit" fork="true">				
				<fileset dir="${sc.class.dir}">
					<include name="**/JythonPossibilitiesTest.class" />
				</fileset>
			</batchtest>
			<batchtest todir="${sc.build.dir}/junit" fork="false">
				<fileset dir="${sc.class.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/JythonPossibilitiesTest.class" />
					<exclude name="**/Abstract*.class" />
					<exclude name="**/*GWTTest.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="init.dojo" depends="info" description="Copy dojo source files to webapp folder">
		<echo>Deleting old dojo files</echo>
		<delete failonerror="false" dir="${sc.js.dir}/dojo" />
		<delete failonerror="false" dir="${sc.js.dir}/dijit" />
		<delete failonerror="false" dir="${sc.js.dir}/dojox" />
		<echo>Unpack new dojo files</echo>
		<unzip src="dist/js/dojo.zip" dest="${sc.js.dir}">
		</unzip>
		<unzip src="dist/js/dijit.zip" dest="${sc.js.dir}">
		</unzip>
		<unzip src="dist/js/dojox.zip" dest="${sc.js.dir}">
		</unzip>
	</target>

	<target name="init.jython" depends="info" description="Copy jython source files to webapp folder">
		<echo>Deleting old jython files</echo>
		<delete failonerror="false" dir="${sc.webinf.dir}/libJython" />
		<echo>Unpack new jython files</echo>
		<unzip src="dist/jython/libJython.zip" dest="${sc.webinf.dir}" />
	</target>

	<target name="copy.patches" depends="info" description="Apply patches to external source packages: dojo, jython...">
		<copy todir="${sc.webapp.dir}" overwrite="true">
			<fileset dir="dist/patches">
			</fileset>
		</copy>
	</target>

	<target name="deploy.trunk" depends="svn.update, rebuild, build.gwt, dist" description="Clean deploying to server with last svn sources">
		<echo>Deploying trunk distr to server</echo>
		<zip destfile="${sc.build.dir}/userdata-${sc.version}.${sc.last.rev}.zip">
			<zipfileset dir="." includes="userdata*/**" />
		</zip>

		<antcall target="backup.db" />

		<echo>Copy files to server</echo>
		<move todir="${sc.trunk.deploy.path}" file="${sc.build.dir}/userdata-${sc.version}.${sc.last.rev}.zip" overwrite="true" />
		<move todir="${sc.trunk.deploy.path}" file="${sc.war.file}.war" overwrite="true" />
		<move todir="${sc.trunk.deploy.path}" file="${sc.war.file}-ext.war" overwrite="true" />
		<copy todir="${sc.trunk.deploy.path}" file="${sc.db.backup.path}\${sc.db.backup.prefix}-${sc.version}.${sc.last.rev}.zip" overwrite="true" />
	</target>

	<target name="backup.db" depends="info" description="Makes test DB backup by SQLUtil">
		<echo>Making backup of test DB</echo>
		<exec executable="${sc.sqlutil.path}\\SQLUtil_n_nokey.exe">
			<arg value="-server_name=${sc.rdbms.name}" />
			<arg value="-user_name=sa" />
			<arg value="-user_pass=F708420Dx" />
			<arg value="-backup" />
			<arg value="-free_file=${sc.db.backup.path}\${sc.db.backup.prefix}-${sc.version}.${sc.last.rev}.mbk" />
		</exec>
		<zip destfile="${sc.db.backup.path}\${sc.db.backup.prefix}-${sc.version}.${sc.last.rev}.zip">
			<zipfileset file="${sc.db.backup.path}\${sc.db.backup.prefix}-${sc.version}.${sc.last.rev}.mbk" />
		</zip>
		<delete file="${sc.db.backup.path}\${sc.db.backup.prefix}-${sc.version}.${sc.last.rev}.mbk" />
	</target>

	<target name="write.gwt.version" depends="init.dirs" description="Write gwt version to file">
		<echo>Update gwt version</echo>
		<exec resolveexecutable="true" executable="java" output="${sc.build.dir}\war\WEB-INF\classes\gwtversion" dir="${sc.gwt.dir}">
			<arg value="-jar" />
			<arg value="gwt-dev.jar" />
		</exec>
	</target>

	<target name="init.ws.tests" description="Write JAX-WS client Java files for tests">
		<echo>Updating WS test files from ${sc.webapp}/forall/webservices?wsdl</echo>
		<exec resolveexecutable="true" executable="cmd" dir=".">
			<arg value="/c" />
			<arg value="wsimport" />
			<arg line="-s src" />
			<arg value="-Xnocompile" />
			<arg line="-p ru.curs.showcase.test.ws" />
			<arg value="${sc.webapp}/forall/webservices?wsdl" />
		</exec>
	</target>

	<target name="info.env" description="Write to output current environment variables">
		<echo>System properties</echo>
		<echoproperties>
			<propertyset>
				<propertyref builtin="system" />
				<propertyref builtin="commandline"/>
			</propertyset>
		</echoproperties>
		<echo>Local properties</echo>
		<echoproperties>
			<propertyset>
				<propertyref prefix="sc." />
			</propertyset>
		</echoproperties>
	</target>

	<target name="svn.update" description="Update all project files from svn">
		<svn refid="svn.settings">
			<update dir="." recurse="true" />
		</svn>
	</target>

	<target name="test.unit.and.gwt" depends="test.gwt, test" description="Check gwt compilation and unit and module tests">
	</target>
	
	<target name="checkstyle" depends="init.dirs, compile" description="Runs Checkstyle checks">
		  <checkstyle config="global.conf/Curs.Def.CheckStyle.config"
		              failureProperty="checkstyle.failure"
		              failOnViolation="true" classpathref="master-classpath">
		    	<formatter type="xml" tofile="${sc.build.dir}/checkstyle/report.xml"/>
		  	    <formatter type="plain"/>
		    	<fileset dir="src">
					<include name="**/*.java" />
					<exclude name="ru/curs/showcase/app/jre/**" />
					<exclude name="ru/curs/showcase/test/ws/**" />		    		
		    	</fileset>
		  		<fileset dir="extragwt" includes="**/*.java"/>			  	 	
		  </checkstyle>		
	</target>
</project>

